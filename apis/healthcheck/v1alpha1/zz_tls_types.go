/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TLSObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TLSParameters struct {

	// (String) TLS cacert file to use for the TLS connection
	// TLS cacert file to use for the TLS connection
	// +kubebuilder:validation:Optional
	Cacert *string `json:"cacert,omitempty" tf:"cacert,omitempty"`

	// (String) TLS cert file to use for the TLS connection
	// TLS cert file to use for the TLS connection
	// +kubebuilder:validation:Optional
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	// (String) Health check description
	// Health check description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Enable the health check on the Appclacks platform
	// Enable the health check on the Appclacks platform
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The health check will be considered failed if hte certificate expires is less than this duration (for example: 168h)
	// The health check will be considered failed if hte certificate expires is less than this duration (for example: 168h)
	// +kubebuilder:validation:Optional
	ExpirationDelay *string `json:"expirationDelay,omitempty" tf:"expiration_delay,omitempty"`

	// (Boolean) Accept insecure TLS connections
	// Accept insecure TLS connections
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) Health check interval (example: 30s)
	// Health check interval (example: 30s)
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) TLS key file to use for the TLS connection
	// TLS key file to use for the TLS connection
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Map of String) Health check labels
	// Health check labels
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Health check name
	// Health check name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Number) Health check port
	// Health check port
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// (String) Server name to use for the TLS connection. Mandatory if insecure is not set.
	// Server name to use for the TLS connection. Mandatory if insecure is not set.
	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`

	// (String) Health check target (can be a domain or an IP address)
	// Health check target (can be a domain or an IP address)
	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// (String) Health check timeout (example: 5s)
	// Health check timeout (example: 5s)
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

// TLSSpec defines the desired state of TLS
type TLSSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TLSParameters `json:"forProvider"`
}

// TLSStatus defines the observed state of TLS.
type TLSStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TLSObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TLS is the Schema for the TLSs API. Create a TLS connection on the target
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,appclacks}
type TLS struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TLSSpec   `json:"spec"`
	Status            TLSStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TLSList contains a list of TLSs
type TLSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TLS `json:"items"`
}

// Repository type metadata.
var (
	TLS_Kind             = "TLS"
	TLS_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TLS_Kind}.String()
	TLS_KindAPIVersion   = TLS_Kind + "." + CRDGroupVersion.String()
	TLS_GroupVersionKind = CRDGroupVersion.WithKind(TLS_Kind)
)

func init() {
	SchemeBuilder.Register(&TLS{}, &TLSList{})
}
