/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CommandObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CommandParameters struct {

	// (Set of String) Command arguments
	// Command arguments
	// +kubebuilder:validation:Optional
	Arguments []*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// (String) Health check command
	// Health check command
	// +kubebuilder:validation:Required
	Command *string `json:"command" tf:"command,omitempty"`

	// (String) Health check description
	// Health check description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Health check interval (example: 30s)
	// Health check interval (example: 30s)
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// (Map of String) Health check labels
	// Health check labels
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) Health check name
	// Health check name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Health check timeout (example: 5s)
	// Health check timeout (example: 5s)
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

// CommandSpec defines the desired state of Command
type CommandSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CommandParameters `json:"forProvider"`
}

// CommandStatus defines the observed state of Command.
type CommandStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CommandObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Command is the Schema for the Commands API. Execute an arbitrary shell command
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,appclacks}
type Command struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CommandSpec   `json:"spec"`
	Status            CommandStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CommandList contains a list of Commands
type CommandList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Command `json:"items"`
}

// Repository type metadata.
var (
	Command_Kind             = "Command"
	Command_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Command_Kind}.String()
	Command_KindAPIVersion   = Command_Kind + "." + CRDGroupVersion.String()
	Command_GroupVersionKind = CRDGroupVersion.WithKind(Command_Kind)
)

func init() {
	SchemeBuilder.Register(&Command{}, &CommandList{})
}
